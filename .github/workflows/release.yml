name: Release CI

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  container_build:
    # The host should always be linux
    runs-on: ubuntu-latest
    name: ${{ matrix.BUILD_TYPE }} ${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        BUILD_TYPE: [appimage, coverage]
        distro:
         - bullseye
        arch:
          - aarch64
    steps:
      - uses: actions/checkout@v2.1.0
        with:
          submodules: recursive
      - uses: uraimo/run-on-arch-action@v2.1.1
        name: Build
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          githubToken: ${{ github.token }}
          setup: mkdir -p "${PWD}/artifacts"
          dockerRunArgs: --volume "${PWD}/artifacts:/artifacts"
          shell: /bin/sh
          install: |
            apt-get update -y
            apt-get install -y gcovr libmagic-dev libjpeg-dev libpng-dev libboost-filesystem-dev libboost-regex-dev cimg-dev cmake build-essential git wget libboost-dev patchelf autoconf libc-bin

          run: |
            if [ ${{matrix.BUILD_TYPE}} == 'coverage' ]; then
                bash -ex ci/test-coverage.sh
            else
                bash -ex ci/build.sh
                mv linuxdeploy*.AppImage* /artifacts
            fi

      - name: Upload
        if: matrix.BUILD_TYPE != 'coverage'
        uses: actions/upload-artifact@v2
        with:
          name: container_artifacts
          path: artifacts/linuxdeploy*.AppiImage*

  upload:
    name: Create release and upload artifacts
    needs: [container_build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Inspect directory after downloading artifacts
        run: ls -alFR
      - name: Create release and upload artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOYTOKEN }}
        run: |
            wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
            chmod +x pyuploadtool-x86_64.AppImage
            ./pyuploadtool-x86_64.AppImage **/linuxdeploy*.AppImage*